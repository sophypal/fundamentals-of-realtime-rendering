<div class="relative px-4 sm:px-6 lg:px-8">
    <Heading @title='Scene Graphs' @subtitle='Modeling everything with trees'>
        Scene complexity can be managed with a simple tree structure. Relationships between objects and their positions
        are hierarchical in nature. Scene Graphs represent this structure but the exact form might differ in their use.
        The concept is simple but implementations vary. In this chapter, I'll dive into a bare-bones scene
        graph implementation and maybe clear some confusion along the way.
    </Heading>
    <ProseMarkdown>
        ## Chaining Transforms With Parenting

        Objects in the real world can be expressed with absolute positions or relative positions. Most often though, we're
        measuring things relatively. Renovating a kitchen, for instance, require that we choose a reference point within
        the home. It would be silly to express a refrigerator location in longitude/latitude coordinates. At least the
        contractor would think you're silly.

        It's also easier to group objects that belong together. A car is comprised of an engine and wheels so grouping the
        car with the internal components is only natural. This relationship can be expressed with a tree.

    </ProseMarkdown>
    <ProseFigure
        @figureId='1'
        @figureCaption='Simple scene hierarchy'
        @imageUrl={{root-url 'figures/basic-scene-graph.png'}}
    />
    <ProseMarkdown>
        When a car moves, the internal components go with it, otherwise it would be weird for a car to move and leave it's engine
        behind. So it shouldn't surprise you that transforms can grouped in this way as well. When a car moves 5 units forward,
        its engine should be moving the same amount. This is what happens when you chain multiple transforms together.

        Let <KatexSpan>\bold{C}</KatexSpan> be the car's transform (location and origin in world space), and <KatexSpan>\bold{E}</KatexSpan> be the engine's transform (relative the cars
        local space), and <KatexSpan>\boldsymbol{p}</KatexSpan> equal a point on the engine (in engine local space). This can be expressed with
        <KatexSpan>\boldsymbol{p}' = \bold{C} \cdot \bold{E} \cdot \boldsymbol{p}</KatexSpan>.

        <KatexSpan>\boldsymbol{p}'</KatexSpan> is the transformed point after being multiplied by
        <KatexSpan>\bold{C} \cdot \bold{E}</KatexSpan>.

        This chaining can also be expressed as a tree. In fact, it's often the same tree used to logically group them together.

    </ProseMarkdown>
    <ProseFigure
        @figureId='2'
        @figureCaption='Transform hierarchy'
        @imageUrl={{root-url 'figures/transform-hierarchy.png'}}
    />
    <ProseMarkdown>
        In order to get the world position of the engine, we traverse the tree backwards from **engine** to **car**. Multiplying by the **world's** transform
        isn't entirely necessary as **world** is the root and we were looking to find the engine's **position** and **orientation**
        relative to the **world space**. **World** can usually carry an identity matrix so you can multiply away without affecting the result.

        Going from **local** to **world** is a common operation but going from **world** to **local** can also be useful. Given <KatexSpan>\boldsymbol{p}'</KatexSpan>, it's
        possible to get <KatexSpan>\boldsymbol{p}</KatexSpan> with <KatexSpan>\bold{E}^{-1} \cdot \bold{C}^{-1} \cdot \boldsymbol{p}'</KatexSpan>. Math libraries usually allow you to compute the inverse matrix.
        In **ThreeJS**, each object also has a world matrix that is already computed so you don't have to traverse this tree.
    </ProseMarkdown>
    <ProseFigure
        @figureId='3'
        @figureCaption='Scene graph embedding transforms'
        @imageUrl={{root-url 'figures/scene-graph-w-transforms.png'}}
    />
    <ProseMarkdown>
        Finding <KatexSpan>\boldsymbol{p}'</KatexSpan> from <KatexSpan>\boldsymbol{p}</KatexSpan> is as easy as
        <KatexSpan>engine.worldMatrix \cdot \boldsymbol{p}</KatexSpan> and finding <KatexSpan>\boldsymbol{p}</KatexSpan> from <KatexSpan>\boldsymbol{p}'</KatexSpan>
        is <KatexSpan>engine.worldMatrixInverse \cdot \boldsymbol{p}'</KatexSpan>.
    </ProseMarkdown>
    <ProseFigure
        @figureId='4'
        @figureCaption='Scene graph from complex car model'
        @imageUrl={{root-url 'figures/car-scene-graph.png'}}
        @vertical={{true}}
    />
    <ProseMarkdown>
        ## Non-Renderable Objects

        This logical chaining of object relationships and transforms is what makes up a scene graph. A scene graph consist of
        nodes which represent renderable and non-renderable objects in the scene. Non-renderable nodes represent abstract objects.
        Lights and cameras, for example, aren't modeled as a renderable object but their transforms are useful for rendering the
        entire scene. Empty objects can also be valid nodes. These nodes can serve as parents to renderable objects to help
        in grouping them. There can be plenty of other non-renderable nodes that will be ignored by the renderer. Game engine
        scene graphs might contain these:

        * **Volumes** - used in games to design areas that have specific requirements in game play like triggering events, capturing reflections, designating areas for special rendering instructions
        * **Navigation Mesh** - used in AI pathfinding for determining walkable surfaces
        * **Locators**, **Emitters** - points in space used for specific game play purposes like particles, sound, waypoints, points of interests, .etc

        ## Scene Graphs vs Octrees vs BVH

        An **octree** is a common data structure used to recursively divide space equally into 8 smaller spaces. A **BVH**,
        or **bounding volume heirarchy** is a similar space dividing structure but uses bounding volumes to group clusters of objects
        closer together. A **scene graph** is most commonly used to repesent all objects in a scene and their transform relationships. It's usually
        separate from accelerated data structures used in spatial partitioning to help with visibility determination.

        In the literal sense, both **octrees** and **BVHs** are scene graphs. They are graphs of objects in your scene. This could have
        contributed to the confusion that **scene graphs** increases rendering performance by culling large groups of objects. However,
        when developers refer to **scene graphs**, they usually mean the simpler kind. Culling is not a requirement for **scene graphs**.
        Culling parts of a scene that aren't visible is called **frustum culling**. Depending on the size of the scene, checking
        visibility for each object can be slow, and that's where **octrees** and **BVHs** help. They don't replace **scene graphs**. They
        are used as separate data structures since they are optimized mainly for visibility determination, not logical
        organizations.
    </ProseMarkdown>
    <ProseFigure
        @figureId='5'
        @figureCaption='Visualization of an octree. The scene is divided into 8 equal parts and is done recursively.'
        @imageUrl={{root-url 'figures/octree.jpeg'}}
    />
    <ProseFigure
        @figureId='6'
        @figureCaption='Visualization of a BVH tree. The scene is divided bounding volumes of variable size.'
        @imageUrl={{root-url 'figures/bvhtree.png'}}
        @vertical={{true}}
    />
</div>
